datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum PublishStatus {
  DRAFT
  PUBLISHED
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  AUTHOR
}

model Admin {
  id       Int     @id @default(autoincrement())
  uuid     String  @default(uuid()) @unique
  email    String  @unique
  password String
  name     String?
  bio      String?
  picture  String?
  role     UserRole @default(AUTHOR)
  posts    Post[]
  pages    Page[]
  series   Series[]
}

model Post {
  id             Int      @id @default(autoincrement())
  uuid           String   @default(uuid()) @unique
  title          String
  content        String
  excerpt        String?
  slug           String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  category       Category? @relation(fields: [categoryId], references: [id])
  categoryId     Int?
  image          String?  // Path to featured image
  imageId        Int?     // Reference to Media model
  thumbnail      String?  // Optional thumbnail path
  status         PublishStatus @default(DRAFT)
  publishedAt    DateTime?
  author         Admin    @relation(fields: [authorId], references: [id])
  authorId       Int
  series         Series?  @relation(fields: [seriesId], references: [id])
  seriesId       Int?
  sequenceNumber Int?     // Orden dentro de la serie
}

model Category {
  id    Int    @id @default(autoincrement())
  uuid  String @default(uuid()) @unique
  name  String @unique
  slug  String @unique
  posts Post[]
}

model Page {
  id        Int      @id @default(autoincrement())
  uuid      String   @default(uuid()) @unique
  title     String
  slug      String   @unique
  content   String
  excerpt   String?
  image     String?  // Path to featured image
  imageId   Int?     // Reference to Media model
  status    PublishStatus @default(DRAFT)
  publishedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    Admin    @relation(fields: [authorId], references: [id])
  authorId  Int
}



model Series {
  id          Int      @id @default(autoincrement())
  uuid        String   @default(uuid()) @unique
  title       String
  slug        String   @unique
  description String?
  coverImage  String?  // Path to cover image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      Admin    @relation(fields: [authorId], references: [id])
  authorId    Int
  posts       Post[]
}

model BlogSettings {
  id                Int      @id @default(autoincrement())
  uuid              String   @default(uuid()) @unique
  title             String   @default("Mi Blog")
  description       String   @default("Un blog personal")
  language          String   @default("es")
  template          String   @default("default")
  domain            String?
  googleAnalyticsId String?
  socialNetworks    Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model MenuItem {
  id        Int      @id @default(autoincrement())
  uuid      String   @default(uuid()) @unique
  label     String
  url       String
  order     Int
  parentId  Int?
  parent    MenuItem?  @relation("MenuItemToMenuItem", fields: [parentId], references: [id])
  children  MenuItem[] @relation("MenuItemToMenuItem")
}

model Media {
  id          Int      @id @default(autoincrement())
  uuid        String   @default(uuid()) @unique
  filename    String
  originalName String
  mimeType    String
  path        String
  size        Int
  entityType  String?
  entityId    String?
  variants    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
